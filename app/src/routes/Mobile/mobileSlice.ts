import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { MobileState } from './types';
import { getMobileAsync } from './mobileAsync';

const initialState: MobileState = {
    items: [],
    loading: false,
    hasError: false
};

export const mobileSlice = createSlice({
    name: 'mobile',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // Use the PayloadAction type to declare the contents of `action.payload`
        incrementByAmount: (state, action: PayloadAction<number>) => {
            // state.value += action.payload;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getMobileAsync.pending, (state) => {
                state.loading = true;
            })
            .addCase(getMobileAsync.fulfilled, (state, action) => {
                state.loading = false;
                state.items = action.payload;
            })
            .addCase(getMobileAsync.rejected, (state) => {
                state.loading = false;
            });
    },
});

export const { incrementByAmount } = mobileSlice.actions;

export default mobileSlice.reducer;
